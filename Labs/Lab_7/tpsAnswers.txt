TPS 1

	1.) A function returns a value, but a procedure does not. A method is similar to a function, but is internal to part of a class. The term method is used almost exclusively in object-oriented programming.

	2.)

	3.)

	4.) line number 14 is where SUM is located at and it adds up m and n to get the sum of them.

	5.) we can use j instead but it would not be optimal if we were to call the sum function multiple times as it would return to the same line.

	6.) the return adress is supposed to be save on line 11. we save it to the register $ra, and it should be the sum of m and n, but I dont think it makes sense without having a jal.

	7.) 

	8.) the address of the statement that the program should return to from SUM is 0x00400020.

	9.)

	10.)

	11.) i use jal instead to save the address.

	12.)


TPS 2

	1.) proc2.c would output 38.

	2.) in Main: we load x and y to $s0 and $s1. we set 10 as the input argument for SUM and jal to the sum. when we do return we set t0 to be the sum of x and y. we then set y to be (x+y) + v0 and print it out.

	3.) the problem is that we changed the return adress and didnt save the one that would return to main so we can't access it anymore.

	4.) you would resolve this put putting that value/variable into the stack and basically be able to return it whenever you need it by using lw.

	5.) the original value $s0 had was x and it gets overwritten/changed to now be set to the value of m. this is a problem because you no longer have access to it when you need to use it, you can fix this by saving it on the stack.

	6.) 
	prologue:
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		sw $s0, 0($sp)

	epilogue:
		lw $ra, 4($sp)
		addi $sp, $sp, 8
		jr $ra

		